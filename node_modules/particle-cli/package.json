{
  "name": "particle-cli",
  "description": "Simple Node commandline application for working with your Particle devices and using the Particle Cloud",
  "version": "1.9.3",
  "author": {
    "name": "David Middlecamp"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/spark/particle-cli"
  },
  "license": "LGPL-3.0",
  "bin": {
    "particle": "./bin/particle.js"
  },
  "main": "./app.js",
  "engines": {
    "node": ">=0.10.40"
  },
  "dependencies": {
    "binary-version-reader": "^0.3.0",
    "chalk": "^1.0.0",
    "cli-spinner": "^0.2.1",
    "cli-table": "^0.3.1",
    "glob": "^4.2.1",
    "hogan.js": "^2.0.0",
    "inquirer": "^0.11.2",
    "latest-version": "^2.0.0",
    "lodash": "^3.10.1",
    "moment": "^2.9.0",
    "node-wifiscanner2": "^1.1.1",
    "request": "^2.46.0",
    "semver": "^5.1.0",
    "serialport": "^2.0.1",
    "softap-setup": "^1.1.4",
    "temp": "^0.8.3",
    "when": "^3.7.2",
    "xtend": "^4.0.0"
  },
  "scripts": {
    "test": "mocha test/",
    "lint": "eslint commands/**/*.js lib/**/*.js test/**/*.js *.js",
    "coverage": "istanbul cover ./node_modules/mocha/bin/_mocha -- -R spec test/",
    "coveralls": "istanbul cover ./node_modules/mocha/bin/_mocha --report lcovonly -- -R spec test/ && cat ./coverage/lcov.info | ./node_modules/coveralls/bin/coveralls.js && rm -rf ./coverage",
    "doctoc": "doctoc --title '## Table of Contents' README.md"
  },
  "contributors": [
    {
      "name": "Kenneth Lim",
      "url": "https://github.com/kennethlimcp"
    },
    {
      "name": "David Washington",
      "url": "https://github.com/dwcares"
    },
    {
      "name": "TJ Hunter",
      "url": "https://github.com/Hypnopompia"
    },
    {
      "name": "Udo Kramer",
      "url": "https://github.com/optikfluffel"
    },
    {
      "name": "vk2tds",
      "url": "https://github.com/vk2tds"
    },
    {
      "name": "Emily Rose",
      "url": "https://github.com/emilyrose"
    },
    {
      "name": "Kyle Marsh",
      "url": "https://github.com/kylemarsh"
    },
    {
      "name": "Harrison Jones",
      "url": "https://github.com/harrisonhjones"
    },
    {
      "name": "Bryce Kahle",
      "url": "https://github.com/brycekahle"
    }
  ],
  "preferGlobal": true,
  "devDependencies": {
    "coveralls": "^2.11.4",
    "doctoc": "^0.15.0",
    "eslint": "^1.9.0",
    "istanbul": "^0.3.22",
    "mocha": "^2.2.5",
    "proxyquire": "^1.6.0",
    "should": "^7.0.2",
    "sinon": "^1.15.4"
  },
  "readme": "[![npm](https://img.shields.io/npm/v/particle-cli.svg?style=flat-square)](https://www.npmjs.com/package/particle-cli)[![Build Status](https://img.shields.io/travis/spark/particle-cli.svg?style=flat-square)](https://travis-ci.org/spark/particle-cli)[![Code Coverage](https://img.shields.io/coveralls/spark/particle-cli.svg?style=flat-square)](https://coveralls.io/github/spark/particle-cli)[![License](https://img.shields.io/badge/license-LGPL-blue.svg?style=flat-square)](https://github.com/spark/particle-cli/blob/master/LICENSE)\n\n# Particle CLI\n\nThe Particle CLI is a powerful tool for interacting with your devices and the Particle Cloud.  The CLI uses [node.js](http://nodejs.org/) and can run on Windows, Mac OS X, and Linux fairly easily.  It's also [open source](https://github.com/spark/particle-cli) so you can edit and change it, and even send in your changes as [pull requests](https://help.github.com/articles/using-pull-requests) if you want to share!\n\n## Known Issues\n* The Wireless Photon Setup Wizard will only automatically switch networks on OS X. Users of other operating systems will need to manually connect their computer to the Photon's Wi-Fi. You will be prompted during the wizard when this is required.\n\n## Installing\n\n#### If you've already installed ```spark-cli```, please uninstall it before continuing.\n#### Simply type: ```npm uninstall -g spark-cli``` into the command line.\n\n  First, make sure you have [node.js](http://nodejs.org/) installed!\n\n  Next, open a command prompt or terminal, and install by typing:\n\n```sh\n$ npm install -g particle-cli\n$ particle cloud login\n```\n\n  *Note!*  If you have problems running this, make sure you using Terminal / the Command Prompt as an Administator, or try using ```sudo```\n\n```sh\n$ sudo npm install -g particle-cli\n```\n\n\n## Install (advanced)\n\nTo use the local flash and key features you'll need to install [DFU-util](http://DFU-util.sourceforge.net/) and [openssl](http://www.openssl.org/).  They are freely available and open-source, and there are installers and binaries for most major platforms as well.\n\nHere are some great tutorials on the community for full installs:\n\n[Installing on Ubuntu](https://community.particle.io/t/how-to-install-spark-cli-on-ubuntu-12-04/3474)\n\n[Installing on Windows](https://community.particle.io/t/tutorial-spark-cli-on-windows-06-may-2014/3112)\n\n### Installing on Mac OS X:\nRather than installing these packages from source, and instead of using MacPorts, it is relatively straightforward to use [Homebrew](http://brew.sh) to install ```dfu-util``` and ```openssl```. Once you have installed `brew` the basic command is ```brew install dfu-util openssl```.\n\n## Upgrading\n\nTo upgrade Particle-CLI, enter the following command:\n\n```sh\n$ npm update -g particle-cli\n```\n\n\n## Running from source (advanced)\n\nTo grab the CLI source and play with it locally\n\n```sh\ngit clone git@github.com:spark/particle-cli.git\ncd particle-cli\nnpm install\nnode app.js help\n```\n\n<!-- START doctoc generated TOC please keep comment here to allow auto update -->\n<!-- DON'T EDIT THIS SECTION, INSTEAD RE-RUN doctoc TO UPDATE -->\n## Table of Contents\n\n- [Getting Started](#getting-started)\n  - [particle setup](#particle-setup)\n  - [particle help](#particle-help)\n- [Updating Firmware](#updating-firmware)\n  - [Photon/P1/Electron](#photonp1electron)\n    - [particle update](#particle-update)\n  - [Core](#core)\n    - [Apply the CC3000 patch](#apply-the-cc3000-patch)\n    - [Performing a \"Deep update\"](#performing-a-deep-update)\n- [Command Reference](#command-reference)\n  - [particle setup wifi](#particle-setup-wifi)\n  - [particle login](#particle-login)\n  - [particle logout](#particle-logout)\n  - [particle list](#particle-list)\n  - [particle device add](#particle-device-add)\n  - [particle device rename](#particle-device-rename)\n  - [particle device remove](#particle-device-remove)\n  - [particle flash](#particle-flash)\n    - [Flashing a directory](#flashing-a-directory)\n    - [Flashing one or more source files](#flashing-one-or-more-source-files)\n    - [Flashing a known app](#flashing-a-known-app)\n    - [Compiling remotely and Flashing locally](#compiling-remotely-and-flashing-locally)\n  - [particle compile](#particle-compile)\n    - [compiling a directory](#compiling-a-directory)\n    - [example particle.include](#example-particleinclude)\n    - [example particle.ignore](#example-particleignore)\n    - [Compiling one or more source files](#compiling-one-or-more-source-files)\n    - [Compiling in a directory containing project files](#compiling-in-a-directory-containing-project-files)\n  - [particle call](#particle-call)\n  - [particle get](#particle-get)\n  - [particle monitor](#particle-monitor)\n  - [particle identify](#particle-identify)\n  - [particle subscribe](#particle-subscribe)\n  - [particle publish](#particle-publish)\n  - [particle serial list](#particle-serial-list)\n  - [particle serial monitor](#particle-serial-monitor)\n  - [particle keys doctor](#particle-keys-doctor)\n  - [particle keys new](#particle-keys-new)\n  - [particle keys load](#particle-keys-load)\n  - [particle keys save](#particle-keys-save)\n  - [particle keys send](#particle-keys-send)\n  - [particle keys server](#particle-keys-server)\n    - [Encoding a server address and port](#encoding-a-server-address-and-port)\n  - [particle keys address](#particle-keys-address)\n  - [particle keys protocol](#particle-keys-protocol)\n  - [particle config](#particle-config)\n  - [particle binary inspect file.bin](#particle-binary-inspect-filebin)\n  - [particle webhook](#particle-webhook)\n\n<!-- END doctoc generated TOC please keep comment here to allow auto update -->\n\n## Getting Started\n\n  These next two commands are all you need to get started setting up an account, claiming a device, and discovering new features.\n\n### particle setup\n\n  Guides you through creating a new account, and claiming your device!\n\n```sh\n$ particle setup\n```\n\n### particle help\n\n  Shows you what commands are available, and how to use them.  You can also give the name of a command for detailed help.\n\n```sh\n$ particle help\n$ particle help keys\n```\n\n## Updating Firmware\n\n### Photon/P1/Electron\n\n#### particle update\n\nIf you wish to easily update the system firmware running on your device to a later version, you can use the `particle update` command. For the exact version it will update to, check the version of the files in the [updates folder](https://github.com/spark/particle-cli/tree/master/updates).\n\n1. Make sure you have [DFU-util](http://dfu-util.sourceforge.net/) installed.\n1. Connect your device via USB, and put it into [DFU mode](https://docs.particle.io/guide/getting-started/modes/#dfu-mode-device-firmware-upgrade-).\n1. Run `particle update`.\n\n### Core\n\n#### Apply the CC3000 patch\n\nThe easiest way to apply the CC3000 patch is to flash the known \"cc3000\" firmware followed by the \"tinker\" firmware over USB.\n\n1. Make sure you have [DFU-util](http://dfu-util.sourceforge.net/) installed\n1. Connect your Core via USB, and place it into DFU mode by holding both buttons, and releasing reset, keep holding mode until your Core flashes yellow.\n1. Run `particle flash --usb cc3000`. This will run a special firmware program that will update the firmware running inside the CC3000 WiFi module.\nWhen it's done running, your Core will be blinking yellow in DFU-mode, you'll need to flash regular firmware like Tinker\nto get connected and developing again.\n1. Run `particle flash --usb tinker`. This will flash a new version of Tinker to your Core and return to a blinking blue \"listening\" state, where\nyou can:\n1. Run `particle setup` or `particle setup wifi` to provide your network credentials to get connected again.\n\n#### Performing a \"Deep update\"\n\nAny Core shipped before Summer 2014 would benefit from having this update applied at least once. It improves the Core's performance on very busy networks, and helps fix other minor issues. This update now ships with the CLI so you can apply it to Cores that are unable to get online otherwise.\n\n1. Make sure you have [DFU-util](http://dfu-util.sourceforge.net/) installed\n1. Connect your Core via usb, and place it into DFU mode by holding both buttons, and releasing RESET, keep holding MODE until your Core flashes yellow.\n1. Run ```particle flash --usb deep_update_2014_06```\n1. Your Core should reboot and try to connect to any previously saved wifi networks, and then update itself again.\n\n## Command Reference\n\n### particle setup wifi\n\nHelpful shortcut for adding another wifi network to a device connected over USB.  Make sure your device is connected via a USB cable, and is slow blinking blue [listening mode](http://docs.particle.io/guide/getting-started/modes/#listening-mode)\n\n```sh\n$ particle setup wifi\n```\n\n### particle login\n\nLogin and save an access token for interacting with your account on the Particle Cloud.\n\n```sh\n$ particle login\n```\n\n### particle logout\n\nLogout and optionally revoke the access token for your CLI session.\n\n```sh\n$ particle logout\n```\n\n### particle list\n\nGenerates a list of what devices you own, and displays information about their status, including what variables and functions are available\n\n```sh\n$ particle list\n\nChecking with the cloud...\nRetrieving devices... (this might take a few seconds)\nmy_device_name (0123456789abcdef01234567) 0 variables, and 4 functions\n  Functions:\n    int digitalwrite(string)\n    int digitalread(string)\n    int analogwrite(string)\n    int analogread(string)\n\n```\n\n### particle device add\n\nAdds a new device to your account\n\n```sh\n$ particle device add 0123456789abcdef01234567\nClaiming device 0123456789abcdef01234567\nSuccessfully claimed device 0123456789abcdef01234567\n```\n\n### particle device rename\n\nAssigns a new name to a device you've claimed\n\n```sh\n$ particle device rename 0123456789abcdef01234567 \"pirate frosting\"\n```\n\n### particle device remove\n\nRemoves a device from your account so someone else can claim it.\n\n```sh\n$ particle device remove 0123456789abcdef01234567\nAre you sure?  Please Type yes to continue: yes\nreleasing device 0123456789abcdef01234567\nserver said  { ok: true }\nOkay!\n```\n\n### particle flash\n\nSends a firmware binary, a source file, or a directory of source files, or a known app to your device.\n\nNote!  When sending source code, the cloud compiles ```.ino``` and ```.cpp``` files differently.  For ```.ino``` files, the cloud will apply a pre-processor.  It will add missing function declarations, and it will inject an ```#include \"\n  application.h\"``` line at the top of your files if it is missing.\n\nIf you want to build a library that can be used for both Arduino and Particle, here's a useful code snippet:\n\n```cpp\n#if defined(ARDUINO) && ARDUINO >= 100\n#include \"Arduino.h\"\n#elif defined(SPARK)\n#include \"application.h\"\n#endif\n```\n\n#### Flashing a directory\n\nYou can setup a directory of source files and libraries for your project, and the CLI will use those when compiling remotely.  You can also create ```particle.include``` and / or a ```particle.ignore``` file in that directory that will tell the CLI specifically which files to use or ignore.\n\n```sh\n$ particle flash deviceName my_project\n```\n\n#### Flashing one or more source files\n\nYou can include any number of individual source files after the device Name, and the CLI will include them while flashing your app.\n\n\n```sh\n$ particle flash deviceName app.ino library1.cpp library1.h\n```\n\n#### Flashing a known app\n\nYou can easily reset a device back to a previous existing app with a quick command. Three app names are reserved right now: \"tinker\", \"voodoo\", and \"cc3000\".  Tinker is the original firmware that ships with the device, and cc3000 will patch the wifi module on your Core. Voodoo is a build of [VoodooSpark](http://voodoospark.me/) to allow local wireless firmata control of a device.\n\n```sh\n$ particle flash deviceName tinker\n$ particle flash deviceName cc3000\n$ particle flash deviceName voodoo\n\n```\n\nYou can also update the factory reset version using the --factory flag, and over usb with --usb\n\n```sh\n$ particle flash --factory tinker\n$ particle flash --usb tinker\n```\n\n#### Compiling remotely and Flashing locally\n\nTo work locally, but use the cloud compiler, simply use the compile command, and then the local flash command after.  Make sure you connect your device via USB and place it into [DFU mode](https://docs.particle.io/guide/getting-started/modes/#dfu-mode-device-firmware-upgrade-).\n\n```sh\n$ particle compile device_type my_project_folder --saveTo firmware.bin\nOR\n$ particle compile device_type app.ino library1.cpp library1.h --saveTo firmware.bin\n$ particle flash --usb firmware.bin\n```\n\n\n### particle compile\n\nCompiles one or more source file, or a directory of source files, and downloads a firmware binary. This is device specific and must be passed as an argument during compilation.\n\nThe devices available are:\n\n- photon (alias is 'p')\n- core (alias is 'c')\n\neg. `particle compile photon xxx` OR `particle compile p xxxx` both targets the photon\n\nNote!  The cloud compiles ```.ino``` and ```.cpp``` files differently.  For ```.ino``` files, the cloud will apply a pre-processor.  It will add missing function declarations, and it will inject an ```#include \"\napplication.h\"``` line at the top of your files if it is missing.\n\nIf you want to build a library that can be used for both Arduino and Particle, here's a useful code snippet:\n\n```cpp\n#if defined(ARDUINO) && ARDUINO >= 100\n#include \"Arduino.h\"\n#elif defined(SPARK)\n#include \"application.h\"\n#endif\n```\n\n#### compiling a directory\n\nYou can setup a directory of source files and libraries for your project, and the CLI will use those when compiling remotely.  You can also create ```particle.include``` and / or a ```particle.ignore``` file in that directory that will tell the CLI specifically which files to use or ignore.  Those files are just plain text with one line per filename\n\n```sh\n$ particle compile device_type my_project_folder\n```\n\n#### example particle.include\n```text\napplication.cpp\nlibrary1.h\nlibrary1.cpp\n```\n\n#### example particle.ignore\n```text\n.ds_store\nlogo.png\nold_version.cpp\n```\n\n#### Compiling one or more source files\n\nYou can include any number of individual source files after the device id, and the CLI will include them while compiling your app.\n\n\n```sh\n$ particle compile device_type app.ino library1.cpp library1.h\n```\n\n#### Compiling in a directory containing project files\n\nThis will push all the files in a directory that the command line is currently 'cd' in for compilation.\n\n```sh\n$ particle compile device_type .\n```\n\n### particle call\n\nCalls a function on one of your devices, use ```particle list``` to see which devices are online, and what functions are available.\n\n```sh\n$ particle call deviceName digitalwrite \"D7,HIGH\"\n1\n```\n\n### particle get\n\nRetrieves a variable value from one of your devices, use ```particle list``` to see which devices are online, and what variables are available.\n\n```sh\n$ particle get deviceName temperature\n72.1\n```\n\n### particle monitor\n\nPulls the value of a variable at a set interval, and optionally display a timestamp\n\n* Minimum delay for now is 500 (there is a check anyway if you keyed anything less)\n* hitting ```CTRL + C``` in the console will exit the monitoring\n\n```sh\n$ particle monitor deviceName temperature 5000\n$ particle monitor deviceName temperature 5000 --time\n$ particle monitor all temperature 5000\n$ particle monitor all temperature 5000 --time\n$ particle monitor all temperature 5000 --time > my_temperatures.csv\n```\n\n### particle identify\n\nRetrieves your device id when the device is connected via USB and in listening mode (flashing blue).\n\n```sh\n$ particle identify\n$ particle identify 1\n$ particle identify COM3\n$ particle identify /dev/cu.usbmodem12345\n\n$ particle identify\n0123456789abcdef01234567\n```\n\n### particle subscribe\n\nSubscribes to published events on the cloud, and pipes them to the console.  Special device name \"mine\" will subscribe to events from just your devices.\n\n```sh\n$ particle subscribe\n$ particle subscribe mine\n$ particle subscribe eventName\n$ particle subscribe eventName mine\n$ particle subscribe eventName deviceName\n$ particle subscribe eventName 0123456789abcdef01234567\n```\n\n### particle publish\n\nAllows a message to be published via the CLI without using a physical Particle device. This is particularly useful when you are testing your firmware against an actual `published` event.\n\nThere is a `--private` flag that allows you to `publish` events to devices subscribing to events with the `MY_DEVICES` option.\n\n```sh\n$ particle publish eventName\n$ particle publish eventName --private\n$ particle publish eventName someData\n$ particle publish eventName someData --private\n```\n\n### particle serial list\n\nShows currently connected devices acting as serial devices over USB\n\n```sh\n$ particle serial list\n```\n\n\n### particle serial monitor\n\nStarts listening to the specified serial device, and echoes to the terminal\n\n```sh\n$ particle serial monitor\n$ particle serial monitor 1\n$ particle serial monitor COM3\n$ particle serial monitor /dev/cu.usbmodem12345\n```\n\n\n### particle keys doctor\n\nHelps you update your keys, or recover your device when the keys on the server are out of sync with the keys on your device.  The ```particle keys``` tools requires both DFU-util, and openssl to be installed.\n\nConnect your device in [DFU mode](https://docs.particle.io/guide/getting-started/modes/#dfu-mode-device-firmware-upgrade-), and run this command to replace the unique cryptographic keys on your device.  Automatically attempts to send the new public key to the cloud as well.\n\n```sh\n$ particle keys doctor your_device_id\n```\n\nThere have been reports of the new public key not being sent to the cloud, in which case ```particle keys send``` will need to be run manually.\n\n### particle keys new\n\nGenerates a new public / private keypair that can be used on a device.\n\n```sh\n$ particle keys new\nrunning openssl genrsa -out device.pem 1024\nrunning openssl rsa -in device.pem -pubout -out device.pub.pem\nrunning openssl rsa -in device.pem -outform DER -out device.der\nNew Key Created!\n\n$ particle keys new mykey\nrunning openssl genrsa -out mykey.pem 1024\nrunning openssl rsa -in mykey.pem -pubout -out mykey.pub.pem\nrunning openssl rsa -in mykey.pem -outform DER -out mykey.der\nNew Key Created!\n```\n\n### particle keys load\n\nCopies a ```.DER``` formatted private key onto your device's external flash.  Make sure your device is connected and in [DFU mode](https://docs.particle.io/guide/getting-started/modes/#dfu-mode-device-firmware-upgrade-).  The `particle keys` tools requires both DFU-util, and openssl to be installed.  Make sure any key you load is sent to the cloud with `particle keys send device.pub.pem`\n\n```sh\n$ particle keys load device.der\n...\nSaved!\n```\n\n### particle keys save\n\nCopies a ```.DER``` formatted private key from your device's external flash to your computer.  Make sure your device is connected and in [DFU mode](https://docs.particle.io/guide/getting-started/modes/#dfu-mode-device-firmware-upgrade-).  The ```particle keys``` tools requires both DFU-util, and openssl to be installed.\n\n```sh\n$ particle keys save name_of_file\n...\nSaved!\n```\n\n### particle keys send\n\nSends a device's public key to the cloud for use in opening an encrypted session with your device.  Please make sure your device has the corresponding private key loaded using the ```particle keys load``` command.\n\n```sh\n$ particle keys send 0123456789abcdef01234567 device.pub.pem\nsubmitting public key succeeded!\n```\n\n### particle keys server\n\nSwitches the server public key stored on the device's external flash. This command is important when changing which server your device is connecting to, and the server public key helps protect your connection. Your device will stay in DFU mode after this command, so that you can load new firmware to connect to your server. By default this will only change the server key associated with the default protocol for a device. If you wish to change a specific protocol, add `--protocol tcp` or `--protocol udp` to the end of your command.\n\n\n```sh\n$ particle keys server my_server.der\n$ particle keys server my_server.der --protocol udp\n```\n\n#### Encoding a server address and port\n\nWhen using the local cloud you can ask the CLI to encode the IP or dns address into your key to control where your device will connect. You may also specify a port number to be included.\n\n```sh\n$ particle keys server my_server.pub.pem 192.168.1.10\n$ particle keys server my_server.der 192.168.1.10 9000\n$ particle keys server my_server.der 192.168.1.10 9000 --protocol udp\n```\n\n### particle keys address\n\nReads and displays the server address, port, and protocol from a device.\n\n```sh\n$ particle keys address\n\ntcp://device.spark.io:5683\n```\n\n### particle keys protocol\n\nChanges the transport protocol used to communicate with the cloud. Available options are `tcp` and `udp` for Photons and Electrons (if you are running at least firmware version 0.4.8).\n\n```sh\n$ particle keys protocol tcp\n$ particle keys protocol udp\n```\n\n### particle config\n\nThe config command lets you create groups of settings and quickly switch to a profile by calling `particle config profile-name`. This is especially useful for switching to your local server or between other environments.\n\nCalling `particle config particle` will switch **Particle-Cli** back to the Particle Cloud API server.\n\n```sh\n$ particle config profile-name\n$ particle config particle\n$ particle config local apiUrl http://localhost:8080  //creates a new profile with name \"local\" and saves the IP-address parameter\n$ particle config useSudoForDfu true\n```\n\nCalling `particle config identify` will output your current config settings.\n\n```sh\n$ particle config identify\nCurrent profile: particle\nUsing API: https://api.particle.io\nAccess token: 01234567890abcdef01234567890abcdef012345\n```\n\n### particle binary inspect file.bin\n\nDescribe binary generated by compile.\n\n```sh\n$ particle binary inspect file.bin\nfile.bin\n CRC is ok (06276dc6)\n Compiled for photon\n This is a system module number 2 at version 6\n It depends on a system module number 1 at version 6\n```\n\n### particle webhook\n\nRegisters your webhook with the Particle Cloud. Creates a postback to the given url when your event is sent.\n\n```sh\n$ particle webhook list\n$ particle webhook delete WEBHOOK_ID\n$ particle webhook create example.json #run this command in the directory containing example.json\n$ particle webhook GET <your_event_name> http://<website.you.are.trying.to.contact\n```\n\nFor `$ particle webhook GET <your_event_name> http://<website.you.are.trying.to.contact`, you can retrieve the response using:\n\n```sh\nvoid setup(){\nParticle.subscribe(\"hook-response/<event_name>\", handlerFunction, MY_DEVICES);\n}\n\nvoid handlerFunction(const char *name, const char *data) {\n  // Important note!  -- Right now the response comes in 512 byte chunks.  \n  // This code assumes we're getting the response in large chunks, and this\n  // assumption breaks down if a line happens to be split across response chunks\n  \n  process the data received here....\n}\n```\nMore examples and information about **webhooks** can be found here: https://docs.particle.io/guide/tools-and-features/webhooks/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/spark/particle-cli/issues"
  },
  "_id": "particle-cli@1.9.3",
  "_from": "particle-cli@"
}
